// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: internal/core/proto/user/userPb.proto

package Hexagonal_Architecture

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserGrpcService_LoginGrpc_FullMethodName      = "/UserGrpcService/LoginGrpc"
	UserGrpcService_CreateUserGrpc_FullMethodName = "/UserGrpcService/CreateUserGrpc"
	UserGrpcService_ForgetPassword_FullMethodName = "/UserGrpcService/ForgetPassword"
	UserGrpcService_ResetPassword_FullMethodName  = "/UserGrpcService/ResetPassword"
)

// UserGrpcServiceClient is the client API for UserGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGrpcServiceClient interface {
	LoginGrpc(ctx context.Context, in *LoginGrpcReq, opts ...grpc.CallOption) (*LoginGrpcRes, error)
	CreateUserGrpc(ctx context.Context, in *CreateUserGrpcReq, opts ...grpc.CallOption) (*CreateUserGrpcRes, error)
	ForgetPassword(ctx context.Context, in *ForgetPasswordReq, opts ...grpc.CallOption) (*ForgetPasswordRes, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordRes, error)
}

type userGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGrpcServiceClient(cc grpc.ClientConnInterface) UserGrpcServiceClient {
	return &userGrpcServiceClient{cc}
}

func (c *userGrpcServiceClient) LoginGrpc(ctx context.Context, in *LoginGrpcReq, opts ...grpc.CallOption) (*LoginGrpcRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginGrpcRes)
	err := c.cc.Invoke(ctx, UserGrpcService_LoginGrpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) CreateUserGrpc(ctx context.Context, in *CreateUserGrpcReq, opts ...grpc.CallOption) (*CreateUserGrpcRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserGrpcRes)
	err := c.cc.Invoke(ctx, UserGrpcService_CreateUserGrpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) ForgetPassword(ctx context.Context, in *ForgetPasswordReq, opts ...grpc.CallOption) (*ForgetPasswordRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForgetPasswordRes)
	err := c.cc.Invoke(ctx, UserGrpcService_ForgetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordRes)
	err := c.cc.Invoke(ctx, UserGrpcService_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGrpcServiceServer is the server API for UserGrpcService service.
// All implementations must embed UnimplementedUserGrpcServiceServer
// for forward compatibility.
type UserGrpcServiceServer interface {
	LoginGrpc(context.Context, *LoginGrpcReq) (*LoginGrpcRes, error)
	CreateUserGrpc(context.Context, *CreateUserGrpcReq) (*CreateUserGrpcRes, error)
	ForgetPassword(context.Context, *ForgetPasswordReq) (*ForgetPasswordRes, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRes, error)
	mustEmbedUnimplementedUserGrpcServiceServer()
}

// UnimplementedUserGrpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserGrpcServiceServer struct{}

func (UnimplementedUserGrpcServiceServer) LoginGrpc(context.Context, *LoginGrpcReq) (*LoginGrpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGrpc not implemented")
}
func (UnimplementedUserGrpcServiceServer) CreateUserGrpc(context.Context, *CreateUserGrpcReq) (*CreateUserGrpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGrpc not implemented")
}
func (UnimplementedUserGrpcServiceServer) ForgetPassword(context.Context, *ForgetPasswordReq) (*ForgetPasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPassword not implemented")
}
func (UnimplementedUserGrpcServiceServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserGrpcServiceServer) mustEmbedUnimplementedUserGrpcServiceServer() {}
func (UnimplementedUserGrpcServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGrpcServiceServer will
// result in compilation errors.
type UnsafeUserGrpcServiceServer interface {
	mustEmbedUnimplementedUserGrpcServiceServer()
}

func RegisterUserGrpcServiceServer(s grpc.ServiceRegistrar, srv UserGrpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserGrpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserGrpcService_ServiceDesc, srv)
}

func _UserGrpcService_LoginGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginGrpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).LoginGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrpcService_LoginGrpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).LoginGrpc(ctx, req.(*LoginGrpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_CreateUserGrpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGrpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).CreateUserGrpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrpcService_CreateUserGrpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).CreateUserGrpc(ctx, req.(*CreateUserGrpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_ForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).ForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrpcService_ForgetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).ForgetPassword(ctx, req.(*ForgetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrpcService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServiceServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGrpcService_ServiceDesc is the grpc.ServiceDesc for UserGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserGrpcService",
	HandlerType: (*UserGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginGrpc",
			Handler:    _UserGrpcService_LoginGrpc_Handler,
		},
		{
			MethodName: "CreateUserGrpc",
			Handler:    _UserGrpcService_CreateUserGrpc_Handler,
		},
		{
			MethodName: "ForgetPassword",
			Handler:    _UserGrpcService_ForgetPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserGrpcService_ResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/core/proto/user/userPb.proto",
}
